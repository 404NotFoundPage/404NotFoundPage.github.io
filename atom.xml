<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢文锐</title>
  <icon>https://www.gravatar.com/avatar/be0690ad30516f82772b1c75fa56acee</icon>
  <subtitle>朝闻道,夕死可以.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="404NotFoundPage.github.io/"/>
  <updated>2018-05-15T01:02:49.039Z</updated>
  <id>404NotFoundPage.github.io/</id>
  
  <author>
    <name>xwr</name>
    <email>xwr204000@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>这是第一篇文章</title>
    <link href="404NotFoundPage.github.io/2018/05/15/hello-world/"/>
    <id>404NotFoundPage.github.io/2018/05/15/hello-world/</id>
    <published>2018-05-15T01:01:17.000Z</published>
    <updated>2018-05-15T01:02:49.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="404NotFoundPage.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js点击代理事件</title>
    <link href="404NotFoundPage.github.io/2018/05/15/js%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>404NotFoundPage.github.io/2018/05/15/js小总结/</id>
    <published>2018-05-15T01:01:17.000Z</published>
    <updated>2018-05-15T01:08:50.164Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="js" scheme="404NotFoundPage.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css居中小技巧</title>
    <link href="404NotFoundPage.github.io/2018/05/15/css%E5%B1%85%E4%B8%AD%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>404NotFoundPage.github.io/2018/05/15/css居中小技巧/</id>
    <published>2018-05-15T00:56:41.000Z</published>
    <updated>2018-05-15T01:07:54.080Z</updated>
    
    <content type="html"><![CDATA[<p>在我们项目开发中，总会遇到许许多多的水平或者垂直居中问题，这是我在敲代码的时候总结的一些小技巧，以便自己后面的开发学习。</p><h2 id="居中问题"><a href="#居中问题" class="headerlink" title="居中问题"></a>居中问题</h2><p>如果是块级元素，我们可以给块级元素设置一个宽度，然后利用margin:0 auto对其进行水平居中，这算是比较常见的一种；如果是行内元素，可以直接使用text-align:center进行居中。<br><a id="more"></a><br>另外一种用的方法就是绝对定位。通过父元素设置相对定位，子元素设置为绝对定位，然后对子元素进行left：0; top: 0; right: 0; bottom: 0; 接下来是最重要的一点就是 margin:0 auto;便可以通过这种方式实现居中。代码如下:</p><p>还有一种就是利用的表格的属性进行居中。</p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>最后这里要介绍的就是利用css3.0的样式，flex布局进行居中:传统的布局方式有三种，哪三种呢：那么分别就是display，position和float，传统的布局方式有个明显缺点，那就是垂直居中不易实现，所以我们就想到了弹性盒子，也就是flex布局，flex布局可以更好地实现响应式布局。<br>任何容器都可以使用flex布局，一旦父元素成为了flex布局，那么它的子元素也就自动成为了容器的成员，也就是flex项目。Flex容器默认存在2根轴线（水平主轴和垂直交叉轴）,布局就是根据这2根轴来排列项目显示的。<br>块级元素：display:flex;<br>内联元素：display:inlne-flex;<br>注意：使用了flex布局后，项目的float、clear、vertical-align都将失去效果。</p><h3 id="flex容器属性"><a href="#flex容器属性" class="headerlink" title="flex容器属性"></a>flex容器属性</h3><p>总共有六个属性：</p><h4 id="1-flex-direction"><a href="#1-flex-direction" class="headerlink" title="1.flex-direction"></a>1.flex-direction</h4><p>设置主轴的方向，默认为水平，从左至右。它的值有四个：<br>flex-direction: row | row-reverse | column | column-reverse;</p><h4 id="2-flex-wrap"><a href="#2-flex-wrap" class="headerlink" title="2.flex-wrap"></a>2.flex-wrap</h4><p>设置项目是否换行排列。<br>nowrap（默认值）：不换行。<br>wrap：换行，第一行在上方。<br>wrap-reverse：换行，第一行在下方。<br>flex-wrap: nowrap | wrap | wrap-reverse;</p><h4 id="3-justify-content"><a href="#3-justify-content" class="headerlink" title="3.justify-content"></a>3.justify-content</h4><p>设置项目的水平对齐方式。<br>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<br>justify-content: flex-start | flex-end | center | space-between | space-around;</p><h4 id="4-align-items"><a href="#4-align-items" class="headerlink" title="4.align-items"></a>4.align-items</h4><p>设置项目垂直方向对齐方式。<br>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<br>align-items: flex-start | flex-end | center | baseline | stretch;</p><h4 id="5-align-content"><a href="#5-align-content" class="headerlink" title="5.align-content"></a>5.align-content</h4><p>当项目定义了横竖2根轴的时候生效，相当于justify-content和align-items的简写。</p><h4 id="6-flex-flow"><a href="#6-flex-flow" class="headerlink" title="6.flex-flow"></a>6.flex-flow</h4><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap<br>flex-flow: <flex-direction> || <flex-wrap>;</flex-wrap></flex-direction></p><h3 id="flex项目属性"><a href="#flex项目属性" class="headerlink" title="flex项目属性"></a>flex项目属性</h3><h4 id="1-order"><a href="#1-order" class="headerlink" title="1.order"></a>1.order</h4><p>order: <integer>;<br>定义项目的排列顺序，值越小越考前，默认为0。</integer></p><h4 id="2-flex-grow"><a href="#2-flex-grow" class="headerlink" title="2.flex-grow"></a>2.flex-grow</h4><p>flex-grow: <number>;<br>定义项目的放大比例，默认为0（不放大）。</number></p><h4 id="3-flex-shrink"><a href="#3-flex-shrink" class="headerlink" title="3.flex-shrink"></a>3.flex-shrink</h4><p>flex-shrink: <number>;<br>定义项目的缩小比例，默认为1，如果空间不足湘江将自动缩小。</number></p><h4 id="4-flex-basis"><a href="#4-flex-basis" class="headerlink" title="4.flex-basis"></a>4.flex-basis</h4><p>flex-basis: <length> | auto;<br>定义项目主轴空间，相当于设置width，默认为auto。</length></p><h4 id="5-align-self"><a href="#5-align-self" class="headerlink" title="5.align-self"></a>5.align-self</h4><p>align-self: auto | flex-start | flex-end | center | baseline | stretch;<br>定义项目的对齐方式。可覆盖align-items。默认值：auto。</p><h4 id="6-flex"><a href="#6-flex" class="headerlink" title="6.flex"></a>6.flex</h4><p>flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]<br>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们项目开发中，总会遇到许许多多的水平或者垂直居中问题，这是我在敲代码的时候总结的一些小技巧，以便自己后面的开发学习。&lt;/p&gt;
&lt;h2 id=&quot;居中问题&quot;&gt;&lt;a href=&quot;#居中问题&quot; class=&quot;headerlink&quot; title=&quot;居中问题&quot;&gt;&lt;/a&gt;居中问题&lt;/h2&gt;&lt;p&gt;如果是块级元素，我们可以给块级元素设置一个宽度，然后利用margin:0 auto对其进行水平居中，这算是比较常见的一种；如果是行内元素，可以直接使用text-align:center进行居中。&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="404NotFoundPage.github.io/tags/css/"/>
    
  </entry>
  
</feed>
